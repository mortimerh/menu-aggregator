steps:
- id: 'branch name'
  name: 'alpine'
  entrypoint: 'sh'  
  args: 
  - '-c'
  - | 
      echo "***********************"
      echo "Branch: $BRANCH_NAME"
      echo "Working dir: $(pwd)"
      echo "***********************"

- id: 'Infrastructure: tf init'
  name: 'hashicorp/terraform:1.4.0'
  dir: 'infrastructure'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform init -input=false -backend-config="bucket=$PROJECT_ID-tfstate" -backend-config="prefix=env/$BRANCH_NAME"
      else
        work_dir=$(pwd)
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init -input=false -backend-config="bucket=$PROJECT_ID-tfstate" -backend-config="prefix=env/$env"  || exit 1
          cd $work_dir
        done
      fi 

# [START tf-plan]
- id: 'Infrastructure: tf plan'
  name: 'hashicorp/terraform:1.4.0'
  dir: 'infrastructure'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform plan -input=false
      else
        work_dir=$(pwd)
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}  
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan || exit 1
          cd $work_dir
        done
      fi 
# [END tf-plan]

# [START tf-apply]
- id: 'Infrastructure: tf apply'
  name: 'hashicorp/terraform:1.4.0'
  dir: 'infrastructure'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      set -e
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME      
        terraform apply -auto-approve
        echo "scraper_function_id=$(terraform output -raw scraper_function_id)" >> /workspace/tf_outputs.sh
        echo "notifier_function_id=$(terraform output -raw notifier_function_id)" >> /workspace/tf_outputs.sh
        echo "website_bucket_name=$(terraform output -raw website_bucket_name)" >> /workspace/tf_outputs.sh
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi
# [END tf-apply]      

- id: 'Frontend: Install dependencies'
  dir: 'frontend'
  name: 'node'
  entrypoint: 'npm'
  args: ['install']

- id: 'Frontend: Build app'
  dir: 'frontend'
  name: 'node'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      source /workspace/tf_outputs.sh
      if [-n "$website_public_url"]; then
        echo "Setting public base url to ${website_public_url}."
        export PUBLIC_URL=$website_public_url
      else
        echo "Missing public base url. Falling back to local root ('.')."
        export PUBLIC_URL=.
      fi
      npm run build

- id: 'Frontend: Deploy'
  dir: 'frontend'
  name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash' 
  args: 
  - '-c'
  - |
      if [ -d "../infrastructure/environments/$BRANCH_NAME/" ]; then
        source /workspace/tf_outputs.sh
        gsutil -m rsync -r -d -y "^data/" build/ gs://$website_bucket_name/ 
      else
        echo "****************************** SKIPPING DEPLOY ********************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi
  
- id: 'Scraper: Install dependencies'
  dir: 'scraper'
  name: 'node'
  entrypoint: 'npm'
  args: ['install']

- id: 'Scraper: Deploy'
  dir: 'scraper'
  name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash' 
  args: 
  - '-c'
  - |
      if [ -d "../infrastructure/environments/$BRANCH_NAME/" ]; then
        source /workspace/tf_outputs.sh
        gcloud functions deploy $scraper_function_id --source=. --set-env-vars BUCKET_NAME=$website_bucket_name
      else
        echo "****************************** SKIPPING DEPLOY ********************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi

- id: 'Notifier: Deploy'
  dir: 'notifier'
  name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash' 
  args: 
  - '-c'
  - |
      if [ -d "../infrastructure/environments/$BRANCH_NAME/" ]; then
        source /workspace/tf_outputs.sh
        gcloud functions deploy $notifier_function_id --source=. --set-env-vars BUCKET_NAME=$website_bucket_name
      else
        echo "****************************** SKIPPING DEPLOY ********************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi