steps:
- id: 'branch name'
  name: 'alpine'
  entrypoint: 'sh'  
  args: 
  - '-c'
  - | 
      echo "***********************"
      echo "Branch: $BRANCH_NAME"
      echo "Working dir: $(pwd)"
      echo "***********************"

- id: 'Infrastructure: tf init'
  name: 'hashicorp/terraform:1.4.0'
  dir: 'infrastructure'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform init -input=false -backend-config="bucket=$PROJECT_ID-tfstate" -backend-config="prefix=env/$BRANCH_NAME"
      else
        work_dir=$(pwd)
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init -input=false -backend-config="bucket=$PROJECT_ID-tfstate" -backend-config="prefix=env/$env"  || exit 1
          cd $work_dir
        done
      fi 

# [START tf-plan]
- id: 'Infrastructure: tf plan'
  name: 'hashicorp/terraform:1.4.0'
  dir: 'infrastructure'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform plan -input=false
      else
        work_dir=$(pwd)
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}  
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan || exit 1
          cd $work_dir
        done
      fi 
# [END tf-plan]

# [START tf-apply]
- id: 'Infrastructure: tf apply'
  name: 'hashicorp/terraform:1.4.0'
  dir: 'infrastructure'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME      
        terraform apply -auto-approve
        echo "SCRAPER_FUNCTION_NAME=$(terraform output -raw scraper_function_name)" >> /workspace/tf_outputs.sh
        echo "WEBSITE_BUCKET_NAME=$(terraform output -raw website_bucket_name)" >> /workspace/tf_outputs.sh
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi
# [END tf-apply]      

- id: 'Frontend: Install dependencies'
  dir: 'frontend'
  name: 'node'
  entrypoint: 'npm'
  args: 
  - 'install'

- id: 'Frontend: Build app'
  dir: 'frontend'
  name: 'node'
  entrypoint: 'npm'
  args: 
  - 'run build'

- id: 'Frontend: Deploy'
  dir: 'frontend'
  name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'sh' 
  args: 
  - '-c'
  - |
      if [ -d "../infrastructure/environments/$BRANCH_NAME/" ]; then
        source /workspace/tf_outputs.sh
        gsutil -m rsync -r -d build/ gs://${WEBSITE_BUCKET_NAME}/
      else
        echo "****************************** SKIPPING DEPLOY ********************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi
  
- id: 'Scraper: Install dependencies'
  dir: 'scraper'
  name: 'node'
  entrypoint: 'npm'
  args: 
  - 'install'

# TODO: Grab function name from tf output
- id: 'Scraper: Deploy'
  dir: 'Scraper'
  name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'sh' 
  args: 
  - '-c'
  - |
      if [ -d "../infrastructure/environments/$BRANCH_NAME/" ]; then
        source /workspace/tf_outputs.sh
        gcloud functions deploy ${SCRAPER_FUNCTION_NAME} --source=.
      else
        echo "****************************** SKIPPING DEPLOY ********************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi